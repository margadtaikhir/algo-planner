{"version":3,"sources":["services/appService.ts","services/utils.ts","cmps/dynamicCmps/InvalidFileType.tsx","cmps/dynamicCmps/ImagePreview.tsx","cmps/dynamicCmps/VideoPreview.tsx","cmps/dynamicCmps/PdfPreview.tsx","cmps/DynamicPreview.tsx","cmps/FileList.tsx","cmps/dynamicCmps/DynamicPlayer.tsx","cmps/Modal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["appService","getFiles","a","fetch","res","json","files","console","log","utils","getFileType","file","mime","InvalidFileType","Card","className","CardHeader","avatar","style","fontSize","title","titleTypographyProps","variant","ImagePreview","name","size","toLocaleString","subheader","width","height","subheaderTypographyProps","color","VideoPreview","length","PdfPreview","pages","DynamicPreview","handleClickOpen","fileType","onClick","getComponent","FileList","map","DynamicPlayer","url","type","src","alt","autoPlay","controls","Typography","Modal","open","handleClose","fileUrl","Dialog","onClose","fullWidth","aria-labelledby","DialogTitle","id","DialogContent","dividers","App","useState","setFiles","isOpen","setIsOpen","selectedFile","setSelectedFile","isLoading","setIsLoading","useEffect","fetchedFiles","Container","maxWidth","LinearProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe97fc31.chunk.js","sourcesContent":["import Files from '../models/File';\n\nconst getFiles = async (): Promise<Files[] | null> => {\n    const url = 'https://mighty-sierra-05836.herokuapp.com/files';\n\n    try {\n        const res = await fetch(url);\n        const {files} = await res.json();\n        \n        return files;\n    } catch (e) {\n        console.log(`Error, failed to get files. ${e}`);\n    }\n    return null;\n}\n\n\n\nconst appService = {\n    getFiles\n}\n\nexport default appService;","import File from '../models/File';\n\nconst getFileType = (file: File | null): String => {\n    switch (file?.mime) {\n        case 'video/mp4': return 'video';\n        case 'image/jpeg': return 'image';\n        case 'application/pdf': return 'pdf';\n        default: return '';\n    }\n}\n\n\n\nconst utils = {\n    getFileType\n}\n\nexport default utils;","import { Card, CardHeader } from \"@material-ui/core\";\nimport ErrorIcon from '@material-ui/icons/Error';\n\nconst InvalidFileType = (): JSX.Element => {\n    return <Card className='card-container'>\n    <CardHeader\n        avatar={<ErrorIcon style={{ fontSize: '4rem' }} />}\n        title=\"Invalid file type\"\n        titleTypographyProps={{ variant: 'h5', className: 'title-container' }}\n    />\n</Card>\n}\n\nexport default InvalidFileType;","import { Card, CardHeader } from \"@material-ui/core\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport File from \"../../models/File\";\n\nconst ImagePreview = ({ file }: { file: File}) => {\n    return <Card className='card-container'>\n        <CardHeader\n            avatar={<ImageIcon style={{ fontSize: '4rem' }} />}\n            title={<>{file.name}  <span className='size'>{file.size.toLocaleString()}kB</span></>}\n            subheader={`${file.width}x${file.height}px`}\n            titleTypographyProps={{ variant: 'h5', className: 'title-container' }}\n            subheaderTypographyProps={{ variant: 'h6', color: 'textPrimary' }}\n        />\n    </Card>\n}\n\nexport default ImagePreview;","import { Card, CardHeader } from \"@material-ui/core\";\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport File from \"../../models/File\";\n\nconst VideoPreview = ({ file }: { file: File}) => {\n    return <Card className='card-container'>\n        <CardHeader\n            avatar={<VideocamIcon style={{ fontSize: '4rem' }} />}\n            title={<>{file.name}  <span className='size'>{file.size.toLocaleString()}kB</span></>}\n            subheader={`${file.length} seconds`}\n            titleTypographyProps={{ variant: 'h5', className: 'title-container' }}\n            subheaderTypographyProps={{ variant: 'h6', color: 'textPrimary' }}\n        />\n    </Card>\n}\n\nexport default VideoPreview;","import { Card, CardHeader } from \"@material-ui/core\";\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\nimport File from \"../../models/File\";\n\nconst PdfPreview = ({ file }: { file: File}) => {\n    return <Card className='card-container'>\n        <CardHeader\n            avatar={<PictureAsPdfIcon style={{ fontSize: '4rem' }} />}\n            title={<>{file.name}  <span className='size'>{file.size.toLocaleString()}kB</span></>}\n            // @ts-ignore\n            subheader={file.pages > 1 ? `${file.pages}  pages` : '1 page'}\n            titleTypographyProps={{ variant: 'h5', className: 'title-container' }}\n            subheaderTypographyProps={{ variant: 'h6', color: 'textPrimary' }}\n        />\n    </Card>\n}\n\nexport default PdfPreview;","import File from '../models/File';\nimport utils from '../services/utils';\nimport InvalidFileType from './dynamicCmps/InvalidFileType';\nimport ImagePreview from './dynamicCmps/ImagePreview';\nimport VideoPreview from './dynamicCmps/VideoPreview';\nimport PdfPreview from './dynamicCmps/PdfPreview';\n\nconst DynamicPreview = ({ file, handleClickOpen }: { file: File, handleClickOpen: (file: File) => void }): JSX.Element => {\n    const fileType = utils.getFileType(file);\n\n    const handleClick = () => {\n        handleClickOpen(file);\n    }\n\n    const getComponent = (file: File) => {\n        switch (fileType) {\n            case 'video': return <VideoPreview file={file} />;\n            case 'image': return <ImagePreview file={file} />;\n            case 'pdf': return <PdfPreview file={file} />;\n            default: return <InvalidFileType />;\n        }\n    }\n\n    return <div onClick={handleClick}>\n        {getComponent(file)}\n    </div>\n}\n\nexport default DynamicPreview;","import FileListModel from \"../models/FileListModel\";\nimport DynamicPreview from \"./DynamicPreview\";\n\n\n const FileList = ({files, handleClickOpen}: FileListModel) : JSX.Element => {\n\n    return <ul className=\"files-container\">\n        {files.map(file => {\n            return <DynamicPreview file={file} key={file.name} handleClickOpen={handleClickOpen}/>\n        })}\n    </ul>\n}\n\nexport default FileList;","import { Typography } from \"@material-ui/core\";\n\nconst DynamicPlayer = ({ url, type }: { url: string, type: String }) => {\n    switch (type) {\n        case 'image': return <img src={url} alt=\"file\" />;\n        case 'video': return <video src={url} autoPlay={true} controls={true}/>;\n        case 'pdf': return <embed src={url} type=\"application/pdf\" />\n        default: return <Typography variant=\"h5\">Not supported file.</Typography>\n    }\n}\n\nexport default DynamicPlayer;","import { DialogContent } from \"@material-ui/core\";\nimport { Dialog, DialogTitle } from \"@material-ui/core\";\nimport ModalModel from \"../models/ModalModel\";\nimport utils from \"../services/utils\";\nimport DynamicPlayer from \"./dynamicCmps/DynamicPlayer\";\n\nconst Modal = ({ open, file, handleClose }: ModalModel): JSX.Element => {\n    const fileUrl = 'https://mighty-sierra-05836.herokuapp.com/' + file?.name;\n    const fileType = utils.getFileType(file);\n\n    return <Dialog open={open} onClose={handleClose} fullWidth={true} className=\"modal-container\" aria-labelledby=\"customized-dialog-title\">\n        <DialogTitle id=\"customized-dialog-title\" className=\"title\">{file?.name}</DialogTitle>\n        <DialogContent dividers className=\"modal-content\">\n            <DynamicPlayer url={fileUrl} type={fileType} />\n        </DialogContent>\n    </Dialog>\n}\n\n\n\nexport default Modal;","import { useState, useEffect } from 'react';\nimport File from './models/File';\nimport appService from './services/appService';\nimport './styles/global.scss';\nimport FileList from './cmps/FileList';\nimport Modal from './cmps/Modal';\nimport { Container, LinearProgress } from '@material-ui/core';\n\nfunction App(): JSX.Element {\n  const [files, setFiles] = useState<File[]>([]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n      const fetchedFiles = await appService.getFiles();\n      if (fetchedFiles) {\n        setFiles(fetchedFiles);\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n\n  const handleClickOpen = (file: File): void => {\n    setSelectedFile(file);\n    setIsOpen(true);\n  }\n\n  const handleClose = () => {\n    setIsOpen(false);\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"sm\" className=\"main-container\">\n        {isLoading ? <LinearProgress /> :\n          <><FileList files={files} handleClickOpen={handleClickOpen} />\n            <Modal open={isOpen} file={selectedFile} handleClose={handleClose} /></>\n        }\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}